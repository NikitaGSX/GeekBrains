#!/usr/bin/env python3.5
# -*- coding: utf-8 -*-

__author__ = 'Дриманович Никита Витальевич'

''' В данном домашнем задании два раза использовался
цикл обхода последовательности чисел в списке, нужно вынести данный цикл
в функцию и вызывать сколь угодное количество раз. Посторался коментировать
немного больше соблюдая рекомендации из PEP-8

'''

import random

def gen_number(f, l, m=10):
    '''Функция возращает случайно сгенерированный список чисел
    из m элементов в диапазоне от f до l

    '''
    return [random.randint(f, l) for i in range(m)]

# Объявление переменных рядом с местом применения
exponentiation = []
f = int(input('Введите первое число в списке: '))
l = int(input('Введите последнее число в списке: '))
sqrt = gen_number(f, l)

# Краткий цикл обхода элементов списка
for number in sqrt:
    exponentiation.append(number ** 2)

print('Квадраты {1}\n \rЭлементов списка {0}  '.format(sqrt, exponentiation))

# Задание-2
#
''' С этим заданием у меня возникли сложности
из-за забытого мною модуля set

'''
# Создание списков фруктов в виде кортежа, для экономии ресурсов
#
a = ('Алыча', 'Амбарелла', 'Бакау', 'Виноград', 'Дуку', 'Каинито', 'Кивано')
b = ('Кивано', 'Лобия', 'Маболо', 'Малуко', 'Дуку', 'Каинито', 'Момордика')
unique_list = list(set(a) & set(b))

print(l)
# Задание-3
#
# Объявление дополнительных переменных к уже объявленым
new_list = []
m = int(input('Введите размер списка: '))
numbers = gen_number(f, l, m)

print(numbers) # Выодит список сгенерированных чисел для наглядности

# Ещё один краткий цикл обхода элементов списка
for number in numbers:
    ''' Проверка на соблюдения условий:

        + Элемент кратен 3
        + Элемент положительный
        + Элемент не кратен 4

    '''
    if number > 0 and number % 3 == 0 and number % 4 != 0:
        new_list.append(number)

print(new_list)
